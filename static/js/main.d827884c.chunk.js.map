{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","celsius","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","onSubmit","loadWeather","type","name","autoComplete","placeholder","error","role","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","setState","sys","calCelsius","main","temp","weather","getWeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d827884c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) =>{\r\n    return (\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n            <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                <i className={'wi '+props.weatherIcon+' display-1'}></i>\r\n                </h5>\r\n                {props.celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>) : null}\r\n                {/** Tunjukan min dan max suhu */ }\r\n                {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n                <h4 className=\"py-3\">\r\n                    {props.description}\r\n                </h4>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction minmaxTemp(min, max){\r\n    if(min && max){\r\n        return (\r\n        <h3>\r\n            <span className=\"px-4\">\r\n                {min}&deg;\r\n            </span>\r\n            <span className=\"px-4\">\r\n                {min}&deg;\r\n            </span>\r\n        </h3>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather","import React from 'react';\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <form onSubmit={props.loadWeather}>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 offset-md-3\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"Masukkan nama kota\"/>\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Masukkan nama negara\"/>\r\n                    </div>\r\n                    <div className=\"col-md-3 mt-md-0 text-md-left py-2\">\r\n                        <button className=\"btn btn-info\">Cari</button>\r\n                    </div>\r\n                    <div className=\"col-md-12 mt-2\">\r\n                        {props.error ?  error() :null}\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction error(){\r\n    return (\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Masukkan nama kota dan negara terlebih dahulu\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Weather from './app_component/weather.component'\nimport Form from './app_component/form.component';\n\n// contoh api call api.openweathermap.org/data/2.5/weather?q=London\nconst API_KEY = \"c876b1ac927587c5cc06d3553d5ec172\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city : undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    this.weatherIcon={\n      Thunderstorm : \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  calCelsius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeatherIcon(icons, rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId <=232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n        break;\n      case rangeId >= 300 && rangeId <=321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n      case rangeId >= 500 && rangeId <=531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n      case rangeId >= 600 && rangeId <=622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n      case rangeId >= 701 && rangeId <=781:\n          this.setState({\n            icon: this.weatherIcon.Atmosphere\n          });\n          break;\n      case rangeId === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n      case rangeId >= 801 && rangeId <=804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    \n    if(city && country){\n      const api_call = await fetch ('https://api.openweathermap.org/data/2.5/weather?q='+city+','+country+'&appid='+API_KEY);\n      const response = await api_call.json();\n\n      this.setState({\n        city: response.name+','+response.sys.country,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      this.getWeatherIcon(this.weatherIcon, response.weather[0].id)\n\n    }else{\n      this.setState({error: true});\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Form \n          loadWeather={this.getWeather}\n          error={this.state.error}\n        />\n        <Weather \n          city={this.state.city}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n          celsius={this.state.celsius}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}